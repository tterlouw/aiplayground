# Code Improvement Notes for domain_finder.py
# Created on April 17, 2025

1. Unused Imports: You import BeautifulSoup and string but don't seem to use them in the provided code. You can remove these lines if they aren't used elsewhere in the file.

# filepath: d:\GithubRepos\aiplayground\domainnamefinder\domain_finder.py
import random
# import string # Unused
import requests
import time
# from bs4 import BeautifulSoup # Unused
import whois
import argparse
from datetime import datetime
# ... rest of the code


2. generate_word Efficiency: The while len(word) != 5: loop is needed because one of your patterns (CCVCV) generates a 4-letter word: random.choice(common_consonant_pairs) (2 letters) + random.choice(vowels) (1 letter) + random.choice(consonants) (1 letter) + random.choice(vowels) (1 letter) = 5 letters. Ah, wait, looking closer:

CVCVC: 5 letters
CVVCV: 5 letters
VCVCV: 5 letters
CCVCV: pair (2) + v (1) + c (1) + v (1) = 5 letters.
CVCVC with possible 'r': 5 letters. It seems all patterns should produce 5 letters. The while loop might be unnecessary or indicates a potential misunderstanding in the pattern definitions. However, keeping it doesn't hurt significantly, but you could investigate why you felt it was needed. If all patterns reliably produce 5 letters, you can remove the loop:

# filepath: d:\GithubRepos\aiplayground\domainnamefinder\domain_finder.py
def generate_word():
    """Generate a pronounceable 5-letter word."""
    patterns = [
        # C=consonant, V=vowel
        lambda: random.choice(consonants) + random.choice(vowels) + random.choice(consonants) + random.choice(vowels) + random.choice(consonants),  # CVCVC
        lambda: random.choice(consonants) + random.choice(vowels) + random.choice(vowels) + random.choice(consonants) + random.choice(vowels),  # CVVCV
        lambda: random.choice(vowels) + random.choice(consonants) + random.choice(vowels) + random.choice(consonants) + random.choice(vowels),  # VCVCV
        lambda: random.choice(common_consonant_pairs) + random.choice(vowels) + random.choice(consonants) + random.choice(vowels),  # CCVCV - This actually produces 5 letters
        lambda: random.choice(consonants) + random.choice(vowels) + random.choice(consonants) + random.choice(vowels + 'r') + random.choice(consonants)  # CVCVC with possible 'r'
    ]
    
    word = random.choice(patterns)()
    # while len(word) != 5:  # Ensure exactly 5 letters - Potentially unnecessary if patterns are correct
    #     word = random.choice(patterns)() 
    
    return word.lower()


3. Google Search Fragility & Error Handling:

Scraping Google search results directly (requests.get(f"https://www.google.com/search?q=%22{word}%22") is unreliable. Google's HTML structure can change, breaking your string checks ('did not match any documents' in response.text). More importantly, frequent automated queries can lead to temporary IP blocks or CAPTCHAs, which your script doesn't handle.
Returning True (meaning "has results") when there's an exception or a non-200 status code might be incorrect. It's safer to assume results exist only when you successfully parse the page and find no "no results" indicators. Consider returning False or even None in case of errors to signify uncertainty.

# filepath: d:\GithubRepos\aiplayground\domainnamefinder\domain_finder.py
# ... inside has_google_results ...
        else:
            print("Has results ✗")
            # No need to wait here if you only care about *no* results
            # print(f"Waiting {google_delay} seconds before next Google search...")
            # time.sleep(google_delay) # Move delay to after the function call if needed universally
            return True
            
    # Handle non-200 status codes
    print(f"Unexpected status code: {response.status_code} ✗")
    # print(f"Waiting {google_delay} seconds before next Google search...") # Move delay
    # time.sleep(google_delay)
    return True # Or consider returning False/None for uncertainty
    
except Exception as e:
    print(f"Error checking Google: {str(e)} ✗")
    # print(f"Waiting {google_delay} seconds before next Google search...") # Move delay
    # time.sleep(google_delay)
    return True # Or consider returning False/None for uncertainty
finally:
    # Ensure delay happens after every attempt, regardless of outcome
    print(f"Waiting {google_delay} seconds before next Google search...")
    time.sleep(google_delay)


4. WHOIS Check Reliability:

Relying on not w.domain_name or exceptions to determine availability can be inaccurate. Different registrars return different WHOIS data structures. A domain might be registered but lack a domain_name field in the response, or an exception could occur for reasons other than availability (network issues, rate limiting by the WHOIS server).
A more reliable check (though still not perfect) is often to see if essential registration details like creation_date or registrar are missing. If w is None or lacks these, it's more likely available.

# filepath: d:\GithubRepos\aiplayground\domainnamefinder\domain_finder.py
def is_domain_available(word, whois_delay=5):
    """Check if the domain is available."""
    domain = f"{word}.com"
    available = False # Default to not available
    try:
        current_time = datetime.now().strftime("%H:%M:%S")
        print(f"[{current_time}] Checking domain: {domain}... ", end="", flush=True)
        
        w = whois.whois(domain)
        
        # Check for absence of key registration details
        if w is None or not w.creation_date: 
            print("Available! ✓")
            available = True
        else:
            print("Taken ✗")
            available = False
            
    except Exception as e:
        # Treat exceptions as potentially available, but log the error
        # Note: This is still an assumption. Rate limits or other errors could trigger this.
        print(f"Potentially Available! (Exception: {str(e)}) ✓")
        available = True # Or False if you want to be more conservative
        
    finally:
        # Delay after each check
        print(f"Waiting {whois_delay} seconds before next WHOIS lookup...")
        time.sleep(whois_delay)
        
    return available


5. User Interaction Flow: The script stops and asks for confirmation (save = input(...)) every time it finds a potential word. If the goal is to find multiple words in one run, this interaction breaks the flow. Consider collecting all found words and presenting them at the end, or add a command-line flag to disable this interactive prompt.