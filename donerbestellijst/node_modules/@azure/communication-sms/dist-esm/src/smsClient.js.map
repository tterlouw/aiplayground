{"version":3,"file":"smsClient.js","sourceRoot":"","sources":["../../src/smsClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,4CAA4C;AAE5C,OAAO,EACL,6BAA6B,EAC7B,eAAe,EACf,oBAAoB,GACrB,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAkC,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAGrF,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,0BAA0B,EAAE,MAAM,kBAAkB,CAAC;AAC9D,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAiExD;;;;GAIG;AACH,MAAM,kBAAkB,GAAG,CAAC,OAAY,EAA+B,EAAE,CACvE,CAAC,CAAC,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAExE;;;GAGG;AACH,MAAM,OAAO,SAAS;IA2BpB,YACE,qBAA6B,EAC7B,mBAAwE,EACxE,eAAiC,EAAE;QAEnC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,oBAAoB,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;QAC7F,MAAM,OAAO,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,YAAY,CAAC;QAE7F,MAAM,uBAAuB,mCACxB,OAAO,GACP;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,MAAM,CAAC,IAAI;aACpB;SACF,CACF,CAAC;QAEF,MAAM,UAAU,GAAG,6BAA6B,CAAC,UAAU,CAAC,CAAC;QAC7D,IAAI,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,GAAG,EAAE,uBAAuB,CAAC,CAAC;QAC1D,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,IAAI,CACf,WAA2B,EAC3B,UAA0B,EAAE,oBAAoB,EAAE,KAAK,EAAE;QAEzD,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAC3E,OAAO,aAAa,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YACzF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CACtC,0BAA0B,CAAC,WAAW,EAAE,WAAW,CAAC,EACpD,cAAc,CACf,CAAC;YACF,OAAO,QAAQ,CAAC,KAAK,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\nimport { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { SmsApiClient } from \"./generated/src/smsApiClient\";\nimport { extractOperationOptions } from \"./extractOperationOptions\";\nimport { generateSendMessageRequest } from \"./utils/smsUtils\";\nimport { logger } from \"./logger\";\nimport { tracingClient } from \"./generated/src/tracing\";\n\n/**\n * Client options used to configure SMS Client API requests.\n */\nexport interface SmsClientOptions extends CommonClientOptions {}\n\n/**\n * Values used to configure Sms message\n */\nexport interface SmsSendRequest {\n  /**\n   * The sender's phone number in E.164 format that is owned by the authenticated account.\n   */\n  from: string;\n  /**\n   * The list of recipient's phone number in E.164 format.\n   */\n  to: string[];\n  /**\n   * The contents of the message that will be sent to the recipient. The allowable content is\n   * defined by RFC 5724.\n   */\n  message: string;\n}\n\n/**\n * Options to configure Sms requests\n */\nexport interface SmsSendOptions extends OperationOptions {\n  /**\n   * Enable this flag to receive a delivery report for this message on the Azure Resource\n   * EventGrid. Default value: false.\n   */\n  enableDeliveryReport?: boolean;\n  /**\n   * Use this field to provide metadata that will then be sent back in the corresponding Delivery\n   * Report.\n   */\n  tag?: string;\n}\n\nexport interface SmsSendResult {\n  /**\n   * The recipient's phone number in E.164 format.\n   */\n  to: string;\n  /**\n   * The identifier of the outgoing Sms message. Only present if message processed.\n   */\n  messageId?: string;\n  /**\n   * HTTP Status code.\n   */\n  httpStatusCode: number;\n  /**\n   * Indicates if the message is processed successfully or not.\n   */\n  successful: boolean;\n  /**\n   * Optional error message in case of 4xx/5xx/repeatable errors.\n   */\n  errorMessage?: string;\n}\n\n/**\n * Checks whether the type of a value is SmsClientOptions or not.\n *\n * @param options - The value being checked.\n */\nconst isSmsClientOptions = (options: any): options is SmsClientOptions =>\n  !!options && !isTokenCredential(options) && !isKeyCredential(options);\n\n/**\n * A SmsClient represents a Client to the Azure Communication Sms service allowing you\n * to send SMS messages.\n */\nexport class SmsClient {\n  private readonly api: SmsApiClient;\n\n  /**\n   * Initializes a new instance of the SmsClient class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(connectionString: string, options?: SmsClientOptions);\n\n  /**\n   * Initializes a new instance of the SmsClient class using an Azure KeyCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: SmsClientOptions);\n\n  /**\n   * Initializes a new instance of the SmsClient class using a TokenCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - TokenCredential that is used to authenticate requests to the service.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: SmsClientOptions);\n\n  constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: KeyCredential | TokenCredential | SmsClientOptions,\n    maybeOptions: SmsClientOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isSmsClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    this.api = new SmsApiClient(url, internalPipelineOptions);\n    this.api.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Sends an SMS from a phone number that is acquired by the authenticated account, to another phone number.\n   *\n   * @param sendRequest - Provides the sender's and recipient's phone numbers, and the contents of the message\n   * @param options - Additional request options\n   */\n  public async send(\n    sendRequest: SmsSendRequest,\n    options: SmsSendOptions = { enableDeliveryReport: false }\n  ): Promise<SmsSendResult[]> {\n    const { operationOptions, restOptions } = extractOperationOptions(options);\n    return tracingClient.withSpan(\"SmsClient-Send\", operationOptions, async (updatedOptions) => {\n      const response = await this.api.sms.send(\n        generateSendMessageRequest(sendRequest, restOptions),\n        updatedOptions\n      );\n      return response.value;\n    });\n  }\n}\n"]}