{"version":3,"file":"index.js","sources":["../src/generated/src/tracing.ts","../src/generated/src/models/mappers.ts","../src/generated/src/models/parameters.ts","../src/generated/src/operations/sms.ts","../src/generated/src/smsApiClient.ts","../src/extractOperationOptions.ts","../src/utils/uuid.ts","../src/utils/smsUtils.ts","../src/logger.ts","../src/smsClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { createTracingClient } from \"@azure/core-tracing\";\n\nexport const tracingClient = createTracingClient({\n  namespace: \"Microsoft.Communication\",\n  packageName: \"@azure/communication-sms\",\n  packageVersion: \"1.1.0\"\n});\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const SendMessageRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SendMessageRequest\",\n    modelProperties: {\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      smsRecipients: {\n        serializedName: \"smsRecipients\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SmsRecipient\"\n            }\n          }\n        }\n      },\n      message: {\n        constraints: {\n          MaxLength: 2048\n        },\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      smsSendOptions: {\n        serializedName: \"smsSendOptions\",\n        type: {\n          name: \"Composite\",\n          className: \"SmsSendOptions\"\n        }\n      }\n    }\n  }\n};\n\nexport const SmsRecipient: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SmsRecipient\",\n    modelProperties: {\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      repeatabilityRequestId: {\n        serializedName: \"repeatabilityRequestId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      repeatabilityFirstSent: {\n        serializedName: \"repeatabilityFirstSent\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SmsSendOptions: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SmsSendOptions\",\n    modelProperties: {\n      enableDeliveryReport: {\n        serializedName: \"enableDeliveryReport\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      tag: {\n        serializedName: \"tag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SmsSendResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SmsSendResponse\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SmsSendResponseItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SmsSendResponseItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SmsSendResponseItem\",\n    modelProperties: {\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      messageId: {\n        serializedName: \"messageId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      httpStatusCode: {\n        serializedName: \"httpStatusCode\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      repeatabilityResult: {\n        serializedName: \"repeatabilityResult\",\n        type: {\n          name: \"String\"\n        }\n      },\n      successful: {\n        serializedName: \"successful\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorMessage: {\n        serializedName: \"errorMessage\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport { SendMessageRequest as SendMessageRequestMapper } from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sendMessageRequest: OperationParameter = {\n  parameterPath: \"sendMessageRequest\",\n  mapper: SendMessageRequestMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2021-03-07\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing\";\nimport { Sms } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SmsApiClient } from \"../smsApiClient\";\nimport {\n  SendMessageRequest,\n  SmsSendOptionalParams,\n  SmsSendOperationResponse\n} from \"../models\";\n\n/** Class containing Sms operations. */\nexport class SmsImpl implements Sms {\n  private readonly client: SmsApiClient;\n\n  /**\n   * Initialize a new instance of the class Sms class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SmsApiClient) {\n    this.client = client;\n  }\n\n  /**\n   * Sends a SMS message from a phone number that belongs to the authenticated account.\n   * @param sendMessageRequest Represents the body of the send message request.\n   * @param options The options parameters.\n   */\n  async send(\n    sendMessageRequest: SendMessageRequest,\n    options?: SmsSendOptionalParams\n  ): Promise<SmsSendOperationResponse> {\n    return tracingClient.withSpan(\n      \"SmsApiClient.send\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { sendMessageRequest, options },\n          sendOperationSpec\n        ) as Promise<SmsSendOperationResponse>;\n      }\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst sendOperationSpec: coreClient.OperationSpec = {\n  path: \"/sms\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: Mappers.SmsSendResponse\n    }\n  },\n  requestBody: Parameters.sendMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest\n} from \"@azure/core-rest-pipeline\";\nimport { SmsImpl } from \"./operations\";\nimport { Sms } from \"./operationsInterfaces\";\nimport { SmsApiClientOptionalParams } from \"./models\";\n\nexport class SmsApiClient extends coreClient.ServiceClient {\n  endpoint: string;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the SmsApiClient class.\n   * @param endpoint The communication resource, for example https://my-resource.communication.azure.com\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: SmsApiClientOptionalParams) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: SmsApiClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-communication-sms/1.1.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: options.endpoint ?? options.baseUri ?? \"{endpoint}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.endpoint = endpoint;\n\n    // Assigning values to Constant parameters\n    this.apiVersion = options.apiVersion || \"2021-03-07\";\n    this.sms = new SmsImpl(this);\n    this.addCustomApiVersionPolicy(options.apiVersion);\n  }\n\n  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */\n  private addCustomApiVersionPolicy(apiVersion?: string) {\n    if (!apiVersion) {\n      return;\n    }\n    const apiVersionPolicy = {\n      name: \"CustomApiVersionPolicy\",\n      async sendRequest(\n        request: PipelineRequest,\n        next: SendRequest\n      ): Promise<PipelineResponse> {\n        const param = request.url.split(\"?\");\n        if (param.length > 1) {\n          const newParams = param[1].split(\"&\").map((item) => {\n            if (item.indexOf(\"api-version\") > -1) {\n              return \"api-version=\" + apiVersion;\n            } else {\n              return item;\n            }\n          });\n          request.url = param[0] + \"?\" + newParams.join(\"&\");\n        }\n        return next(request);\n      }\n    };\n    this.pipeline.addPolicy(apiVersionPolicy);\n  }\n\n  sms: Sms;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-client\";\n\nexport const extractOperationOptions = <T extends OperationOptions>(\n  obj: T\n): {\n  operationOptions: OperationOptions;\n  restOptions: Pick<T, Exclude<keyof T, keyof OperationOptions>>;\n} => {\n  const {\n    abortSignal,\n    onResponse,\n    requestOptions,\n    serializerOptions,\n    tracingOptions,\n    ...restOptions\n  } = obj;\n\n  return {\n    operationOptions: {\n      abortSignal,\n      requestOptions,\n      tracingOptions,\n    },\n    restOptions,\n  };\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { v4 as uuidv4 } from \"uuid\";\n\n// This is used as a workaround to be able to stub generateUuid\n// during testing.\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n * @internal\n */\nexport class Uuid {\n  public static generateUuid(): string {\n    return uuidv4();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SendMessageRequest } from \"../generated/src/models\";\nimport { SmsSendOptions, SmsSendRequest } from \"../smsClient\";\nimport { Uuid } from \"./uuid\";\nimport { SmsSendOptions as InternalOptions } from \"../generated/src/models\";\n\nexport function generateSendMessageRequest(\n  smsRequest: SmsSendRequest,\n  options: SmsSendOptions = {}\n): SendMessageRequest {\n  const _smsSendOptions: InternalOptions = {\n    enableDeliveryReport: options.enableDeliveryReport ?? false,\n  };\n  if (options.tag) {\n    _smsSendOptions[\"tag\"] = options.tag;\n  }\n\n  return {\n    from: smsRequest.from,\n    smsRecipients: smsRequest.to.map((phoneNumberStr) => {\n      return {\n        to: phoneNumberStr,\n        repeatabilityFirstSent: new Date(Date.now()).toUTCString(),\n        repeatabilityRequestId: Uuid.generateUuid(),\n      };\n    }),\n    message: smsRequest.message,\n    smsSendOptions: {\n      enableDeliveryReport: options.enableDeliveryReport ?? false,\n      ...(options.tag && { tag: options.tag }),\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The \\@azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"communication-sms\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\nimport { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { SmsApiClient } from \"./generated/src/smsApiClient\";\nimport { extractOperationOptions } from \"./extractOperationOptions\";\nimport { generateSendMessageRequest } from \"./utils/smsUtils\";\nimport { logger } from \"./logger\";\nimport { tracingClient } from \"./generated/src/tracing\";\n\n/**\n * Client options used to configure SMS Client API requests.\n */\nexport interface SmsClientOptions extends CommonClientOptions {}\n\n/**\n * Values used to configure Sms message\n */\nexport interface SmsSendRequest {\n  /**\n   * The sender's phone number in E.164 format that is owned by the authenticated account.\n   */\n  from: string;\n  /**\n   * The list of recipient's phone number in E.164 format.\n   */\n  to: string[];\n  /**\n   * The contents of the message that will be sent to the recipient. The allowable content is\n   * defined by RFC 5724.\n   */\n  message: string;\n}\n\n/**\n * Options to configure Sms requests\n */\nexport interface SmsSendOptions extends OperationOptions {\n  /**\n   * Enable this flag to receive a delivery report for this message on the Azure Resource\n   * EventGrid. Default value: false.\n   */\n  enableDeliveryReport?: boolean;\n  /**\n   * Use this field to provide metadata that will then be sent back in the corresponding Delivery\n   * Report.\n   */\n  tag?: string;\n}\n\nexport interface SmsSendResult {\n  /**\n   * The recipient's phone number in E.164 format.\n   */\n  to: string;\n  /**\n   * The identifier of the outgoing Sms message. Only present if message processed.\n   */\n  messageId?: string;\n  /**\n   * HTTP Status code.\n   */\n  httpStatusCode: number;\n  /**\n   * Indicates if the message is processed successfully or not.\n   */\n  successful: boolean;\n  /**\n   * Optional error message in case of 4xx/5xx/repeatable errors.\n   */\n  errorMessage?: string;\n}\n\n/**\n * Checks whether the type of a value is SmsClientOptions or not.\n *\n * @param options - The value being checked.\n */\nconst isSmsClientOptions = (options: any): options is SmsClientOptions =>\n  !!options && !isTokenCredential(options) && !isKeyCredential(options);\n\n/**\n * A SmsClient represents a Client to the Azure Communication Sms service allowing you\n * to send SMS messages.\n */\nexport class SmsClient {\n  private readonly api: SmsApiClient;\n\n  /**\n   * Initializes a new instance of the SmsClient class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(connectionString: string, options?: SmsClientOptions);\n\n  /**\n   * Initializes a new instance of the SmsClient class using an Azure KeyCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: SmsClientOptions);\n\n  /**\n   * Initializes a new instance of the SmsClient class using a TokenCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - TokenCredential that is used to authenticate requests to the service.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: SmsClientOptions);\n\n  constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: KeyCredential | TokenCredential | SmsClientOptions,\n    maybeOptions: SmsClientOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isSmsClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    this.api = new SmsApiClient(url, internalPipelineOptions);\n    this.api.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Sends an SMS from a phone number that is acquired by the authenticated account, to another phone number.\n   *\n   * @param sendRequest - Provides the sender's and recipient's phone numbers, and the contents of the message\n   * @param options - Additional request options\n   */\n  public async send(\n    sendRequest: SmsSendRequest,\n    options: SmsSendOptions = { enableDeliveryReport: false }\n  ): Promise<SmsSendResult[]> {\n    const { operationOptions, restOptions } = extractOperationOptions(options);\n    return tracingClient.withSpan(\"SmsClient-Send\", operationOptions, async (updatedOptions) => {\n      const response = await this.api.sms.send(\n        generateSendMessageRequest(sendRequest, restOptions),\n        updatedOptions\n      );\n      return response.value;\n    });\n  }\n}\n"],"names":["createTracingClient","SendMessageRequestMapper","coreClient","Mappers.SmsSendResponse","Parameters.sendMessageRequest","Parameters.apiVersion","Parameters.endpoint","Parameters.contentType","Parameters.accept","__rest","uuidv4","createClientLogger","isTokenCredential","isKeyCredential","parseClientArguments","createCommunicationAuthPolicy"],"mappings":"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"}